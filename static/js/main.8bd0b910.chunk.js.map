{"version":3,"sources":["components/Header.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Brand","href","className","Nav","Link","icon","faUsers","size","id","faGamepad","faUserFriends","faPlusCircle","faComments","Toggle","Image","src","width","roundedCircle","Menu","Item","faUserAlt","Divider","faCog","faQuestionCircle","faSignOutAlt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Index","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8bd0b910.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Image from \"react-bootstrap/Image\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport { faCog, faQuestionCircle, faUsers, faGamepad, faUserFriends, faPlusCircle, faComments,\r\nfaSignOutAlt, faUserAlt} from '@fortawesome/free-solid-svg-icons';\r\nimport '../styles/header.css'\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/cjs/Dropdown\";\r\n\r\n\r\nconst Header = () => (\r\n    <div>\r\n        <Navbar bg=\"dark\"  variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">FLG</Navbar.Brand>\r\n\r\n            <Navbar className=\"m-auto\">\r\n                <Nav>\r\n                    <Nav.Link href=\"#group\"><FontAwesomeIcon icon={faUsers} size='2x' id=\"icon-button\" /></Nav.Link>\r\n                    <Nav.Link href=\"#party\"><FontAwesomeIcon icon={faGamepad} size='2x' id=\"icon-button\" /></Nav.Link>\r\n                    <Nav.Link href=\"#friend\"><FontAwesomeIcon icon={faUserFriends} size='2x' id=\"icon-button\" /></Nav.Link>\r\n                </Nav>\r\n            </Navbar>\r\n            <Navbar >\r\n                <Nav>\r\n                    <Nav.Link href=\"#group\"><FontAwesomeIcon icon={faPlusCircle} size='2x' id=\"icon-button\" /></Nav.Link>\r\n                    <Nav.Link href=\"#group\"><FontAwesomeIcon icon={faComments} size='2x' id=\"icon-button\" /></Nav.Link>\r\n                </Nav>\r\n            </Navbar>\r\n                    <Dropdown id=\"profile\">\r\n                <Dropdown.Toggle id=\"profile\">\r\n                    <Image src=\"images/favicon.png\" width=\"40\" roundedCircle />\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Item href=\"#/action-1\"><FontAwesomeIcon icon={faUserAlt} /> Wai Lin</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item href=\"#/action-1\"><FontAwesomeIcon icon={faCog} /> Setting</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item href=\"#/action-2\"><FontAwesomeIcon icon={faQuestionCircle} /> Help & Support</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item href=\"#/action-2\"> Dark Mode</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item href=\"#/action-3\"><FontAwesomeIcon icon={faSignOutAlt} /> Log Out</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </Navbar>\r\n    </div>\r\n)\r\n\r\nexport default Header","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Header from \"./components/Header\";\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '@fortawesome/react-fontawesome/index'\n\nconst Index = () => (\n    <div>\n        <Header />\n    </div>\n)\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Index />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}